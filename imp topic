1.Public Members

•	Public members are variables or methods that can be accessed from anywhere inside the class, outside the class or from other modules. By default, all members in Python are public
.
	They are defined without any underscore prefix (e.g., self.name).
Eg:
class Employee:
    def __init__(self, name):
        self.name = name   
	
    def display_name(self):   
        print(self.name)

emp = Employee("John")
emp.display_name()   
print(emp.name)      
output:
John
John
2. Protected members

•	Protected members are variables or methods that are intended to be accessed only within the class and its subclasses. They are not strictly private but should be treated as internal.
	In Python, protected members are defined with a single underscore prefix (e.g., self._name).

Eg:
class Employee:
    def __init__(self, name, age):
        self.name = name       # public
        self._age = age        # protected

class SubEmployee(Employee):
    def show_age(self):
        print("Age:", self._age)   # Accessible in subclass

emp = SubEmployee("Ross", 30)
print(emp.name)        # Public accessible
emp.show_age()         

3. Private members
•	Private members are variables or methods that cannot be accessed directly from outside the class. They are used to restrict access and protect internal data.
	In Python, private members are defined with a double underscore prefix (e.g., self.__salary). Python applies name mangling by internally renaming them (e.g., __salary becomes _ClassName__salary) to prevent direct access.

Eg:
class Employee:
    def __init__(self, name, salary):
        self.name = name          # public
        self.__salary = salary    # private

    def show_salary(self):
        print("Salary:", self.__salary)

emp = Employee("Robert", 60000)
print(emp.name)          # Public accessible
emp.show_salary()        # Accessing private correctly
# print(emp.__salary) 
